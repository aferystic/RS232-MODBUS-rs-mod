package iwsk;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import javax.swing.border.*;
import gnu.io.SerialPort;
import java.awt.Color;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JFrame;
import modbus.fun.Master;
import modbus.fun.Slave;
import modbus.fun.MasterModbusExecutor;
import modbus.fun.ModbusFrame;
import modbus.fun.RS232;
import modbus.fun.SlaveModbusExecutor;


// Variables declaration - do not modify
/**
 * The application's main frame.
 */
public class IWSKView extends JFrame {
    Thread slaveThread;
    Master master;
    Slave slave;
//    public IWSKView(SingleFrameApplication app) {
//        super(app);
//        super.getFrame().setResizable(false);
//        initComponents();
//        CheckAvaiblePorts();
//    }

    public IWSKView() {
        initComponents();
        CheckAvaiblePorts();
    }

    public void CheckAvaiblePorts()
    {
        List<String> list = new ArrayList<String>();
        String s = new String();

        list = RS232.createSerialPortList();
        cbPortNumber.removeAllItems();
        for (int i=0; i<list.size(); i++)
            cbPortNumber.addItem(list.get(i));
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = IWSKApp.getApplication().getMainFrame();
            aboutBox = new IWSKAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        IWSKApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - i0rzs5+8dp9m7tskahhc
    private void initComponents() {
        ResourceBundle bundle = ResourceBundle.getBundle("iwsk.resources.IWSKView");
        mainPanel = new JPanel();
        jPanel1 = new JPanel();
        btnSend = new JButton();
        tfFunction = new JTextField();
        tfAddress = new JTextField();
        tfMessage = new JTextField();
        jSeparator3 = new JSeparator();
        tfSendFrame = new JTextField();
        jLabel1 = new JLabel();
        tfGetFrame = new JTextField();
        jLabel3 = new JLabel();
        scrWindowMessage = new JScrollPane();
        tfMessageWindow = new JTextArea();
        pConfiguration = new JPanel();
        lbSpeed = new JLabel();
        lbTimeout2 = new JLabel();
        lbTransmission = new JLabel();
        cbSpeed = new JComboBox<>();
        cbTransmission = new JComboBox<>();
        cbTimeout2 = new JComboBox<>();
        cbAddress = new JComboBox();
        lbAddress = new JLabel();
        cbStation = new JComboBox<>();
        lbStation = new JLabel();
        cbPortNumber = new JComboBox<>();
        lbPortNumber = new JLabel();
        btnSave = new JButton();
        btnChange = new JButton();
        lbTimeout3 = new JLabel();
        cbTimeout3 = new JComboBox<>();
        cbRetransmission = new JComboBox<>();
        jLabel2 = new JLabel();
        menuBar = new JMenuBar();
        JMenu fileMenu = new JMenu();
        JMenuItem exitMenuItem = new JMenuItem();
        JMenu helpMenu = new JMenu();
        JMenuItem aboutMenuItem = new JMenuItem();

        //======== mainPanel ========
        {
            mainPanel.setName("mainPanel");
            mainPanel.setPreferredSize(new Dimension(920, 430));
            mainPanel.setBorder (new javax. swing. border. CompoundBorder( new javax .swing .border .TitledBorder (new javax. swing. border. EmptyBorder( 0
            , 0, 0, 0) , "JFor\u006dDesi\u0067ner \u0045valu\u0061tion", javax. swing. border. TitledBorder. CENTER, javax. swing. border. TitledBorder. BOTTOM
            , new java .awt .Font ("Dia\u006cog" ,java .awt .Font .BOLD ,12 ), java. awt. Color. red) ,
            mainPanel. getBorder( )) ); mainPanel. addPropertyChangeListener (new java. beans. PropertyChangeListener( ){ @Override public void propertyChange (java .beans .PropertyChangeEvent e
            ) {if ("bord\u0065r" .equals (e .getPropertyName () )) throw new RuntimeException( ); }} );

            //======== jPanel1 ========
            {
                jPanel1.setName("jPanel1");

                //---- btnSend ----
                btnSend.setText(bundle.getString("btnSend.text"));
                btnSend.setEnabled(false);
                btnSend.setFocusCycleRoot(true);
                btnSend.setName("btnSend");
                btnSend.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        btnSendMouseClicked(e);
                    }
                });

                //---- tfFunction ----
                tfFunction.setBackground(new Color(240, 240, 240));
                tfFunction.setText(bundle.getString("tfFunction.text"));
                tfFunction.setBorder(LineBorder.createBlackLineBorder());
                tfFunction.setEnabled(false);
                tfFunction.setName("tfFunction");

                //---- tfAddress ----
                tfAddress.setBackground(new Color(240, 240, 240));
                tfAddress.setText(bundle.getString("tfAddress.text"));
                tfAddress.setBorder(LineBorder.createBlackLineBorder());
                tfAddress.setEnabled(false);
                tfAddress.setName("tfAddress");

                //---- tfMessage ----
                tfMessage.setBackground(new Color(240, 240, 240));
                tfMessage.setText(bundle.getString("tfMessage.text"));
                tfMessage.setBorder(LineBorder.createBlackLineBorder());
                tfMessage.setEnabled(false);
                tfMessage.setName("tfMessage");

                //---- jSeparator3 ----
                jSeparator3.setOrientation(SwingConstants.VERTICAL);
                jSeparator3.setName("jSeparator3");

                //---- tfSendFrame ----
                tfSendFrame.setText(bundle.getString("tfSendFrame.text"));
                tfSendFrame.setName("tfSendFrame");

                //---- jLabel1 ----
                jLabel1.setText(bundle.getString("jLabel1.text"));
                jLabel1.setName("jLabel1");

                //---- tfGetFrame ----
                tfGetFrame.setText(bundle.getString("tfGetFrame.text"));
                tfGetFrame.setName("tfGetFrame");

                //---- jLabel3 ----
                jLabel3.setText(bundle.getString("jLabel3.text"));
                jLabel3.setName("jLabel3");

                GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
                jPanel1.setLayout(jPanel1Layout);
                jPanel1Layout.setHorizontalGroup(
                    jPanel1Layout.createParallelGroup()
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jSeparator3)
                            .addGap(441, 441, 441))
                        .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addContainerGap(17, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup()
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(tfAddress, GroupLayout.PREFERRED_SIZE, 48, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tfFunction, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tfMessage, GroupLayout.PREFERRED_SIZE, 216, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnSend, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(tfSendFrame, GroupLayout.PREFERRED_SIZE, 320, GroupLayout.PREFERRED_SIZE))
                                    .addGroup(GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(tfGetFrame, GroupLayout.PREFERRED_SIZE, 320, GroupLayout.PREFERRED_SIZE)))))
                );
                jPanel1Layout.setVerticalGroup(
                    jPanel1Layout.createParallelGroup()
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(16, 16, 16)
                            .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(tfMessage, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(tfFunction, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnSend, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
                                .addComponent(tfAddress, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(tfGetFrame, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(tfSendFrame, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addGap(249, 249, 249)
                            .addComponent(jSeparator3))
                );
            }

            //======== scrWindowMessage ========
            {
                scrWindowMessage.setAutoscrolls(true);
                scrWindowMessage.setName("scrWindowMessage");

                //---- tfMessageWindow ----
                tfMessageWindow.setColumns(15);
                tfMessageWindow.setEditable(false);
                tfMessageWindow.setFont(new Font("Courier", Font.PLAIN, 10));
                tfMessageWindow.setLineWrap(true);
                tfMessageWindow.setRows(5);
                tfMessageWindow.setWrapStyleWord(true);
                tfMessageWindow.setName("tfMessageWindow");
                scrWindowMessage.setViewportView(tfMessageWindow);
            }

            //======== pConfiguration ========
            {
                pConfiguration.setName("pConfiguration");

                //---- lbSpeed ----
                lbSpeed.setText(bundle.getString("lbSpeed.text"));
                lbSpeed.setName("lbSpeed");

                //---- lbTimeout2 ----
                lbTimeout2.setText(bundle.getString("lbTimeout2.text"));
                lbTimeout2.setName("lbTimeout2");

                //---- lbTransmission ----
                lbTransmission.setText(bundle.getString("lbTransmission.text"));
                lbTransmission.setName("lbTransmission");

                //---- cbSpeed ----
                cbSpeed.setModel(new DefaultComboBoxModel<>(new String[] {
                    "9600",
                    "4800",
                    "2400",
                    "1200",
                    "600",
                    "300",
                    "150"
                }));
                cbSpeed.setName("cbSpeed");

                //---- cbTransmission ----
                cbTransmission.setModel(new DefaultComboBoxModel<>(new String[] {
                    "7E1",
                    "7O1",
                    "7N2"
                }));
                cbTransmission.setName("cbTransmission");

                //---- cbTimeout2 ----
                cbTimeout2.setModel(new DefaultComboBoxModel<>(new String[] {
                    "0.01",
                    "0.02",
                    "0.03",
                    "0.04",
                    "0.05",
                    "0.06",
                    "0.07",
                    "0.08",
                    "0.09",
                    "0.10",
                    "0.11",
                    "0.12",
                    "0.13",
                    "0.14",
                    "0.15",
                    "0.16",
                    "0.17",
                    "0.18",
                    "0.19",
                    "0.20",
                    "0.21",
                    "0.22",
                    "0.23",
                    "0.24",
                    "0.25",
                    "0.26",
                    "0.27",
                    "0.28",
                    "0.29",
                    "0.30",
                    "0.31",
                    "0.32",
                    "0.33",
                    "0.34",
                    "0.35",
                    "0.36",
                    "0.37",
                    "0.38",
                    "0.39",
                    "0.40",
                    "0.41",
                    "0.42",
                    "0.43",
                    "0.44",
                    "0.45",
                    "0.46",
                    "0.47",
                    "0.48",
                    "0.49",
                    "0.50",
                    "0.51",
                    "0.52",
                    "0.53",
                    "0.54",
                    "0.55",
                    "0.56",
                    "0.57",
                    "0.58",
                    "0.59",
                    "0.60",
                    "0.61",
                    "0.62",
                    "0.63",
                    "0.64",
                    "0.65",
                    "0.66",
                    "0.67",
                    "0.68",
                    "0.69",
                    "0.70",
                    "0.71",
                    "0.72",
                    "0.73",
                    "0.74",
                    "0.75",
                    "0.76",
                    "0.77",
                    "0.78",
                    "0.79",
                    "0.80",
                    "0.81",
                    "0.82",
                    "0.83",
                    "0.84",
                    "0.85",
                    "0.86",
                    "0.87",
                    "0.88",
                    "0.89",
                    "0.90",
                    "0.91",
                    "0.92",
                    "0.93",
                    "0.94",
                    "0.95",
                    "0.96",
                    "0.97",
                    "0.98",
                    "0.99",
                    "1.00"
                }));
                cbTimeout2.setName("cbTimeout2");

                //---- cbAddress ----
                cbAddress.setEnabled(false);
                cbAddress.setName("cbAddress");

                //---- lbAddress ----
                lbAddress.setText(bundle.getString("lbAddress.text"));
                lbAddress.setName("lbAddress");

                //---- cbStation ----
                cbStation.setModel(new DefaultComboBoxModel<>(new String[] {
                    "Master",
                    "Slave"
                }));
                cbStation.setName("cbStation");
                cbStation.addItemListener(e -> cbStationItemStateChanged(e));

                //---- lbStation ----
                lbStation.setText(bundle.getString("lbStation.text"));
                lbStation.setName("lbStation");

                //---- cbPortNumber ----
                cbPortNumber.setModel(new DefaultComboBoxModel<>(new String[] {
                    "Item 1",
                    "Item 2",
                    "Item 3",
                    "Item 4"
                }));
                cbPortNumber.setName("cbPortNumber");

                //---- lbPortNumber ----
                lbPortNumber.setText(bundle.getString("lbPortNumber.text"));
                lbPortNumber.setName("lbPortNumber");

                //---- btnSave ----
                btnSave.setText(bundle.getString("btnSave.text"));
                btnSave.setName("btnSave");
                btnSave.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        btnSaveMouseClicked(e);
                    }
                });

                //---- btnChange ----
                btnChange.setText(bundle.getString("btnChange.text"));
                btnChange.setEnabled(false);
                btnChange.setName("btnChange");
                btnChange.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        btnChangeMouseClicked(e);
                    }
                });

                //---- lbTimeout3 ----
                lbTimeout3.setText(bundle.getString("lbTimeout3.text"));
                lbTimeout3.setName("lbTimeout3");

                //---- cbTimeout3 ----
                cbTimeout3.setModel(new DefaultComboBoxModel<>(new String[] {
                    "0.1",
                    "0.2",
                    "0.3",
                    "0.4",
                    "0.5",
                    "0.6",
                    "0.7",
                    "0.8",
                    "0.9",
                    "1.0",
                    "1.1",
                    "1.2",
                    "1.3",
                    "1.4",
                    "1.5",
                    "1.6",
                    "1.7",
                    "1.8",
                    "1.9",
                    "2.0",
                    "2.1",
                    "2.2",
                    "2.3",
                    "2.4",
                    "2.5",
                    "2.6",
                    "2.7",
                    "2.8",
                    "2.9",
                    "3.0",
                    "3.1",
                    "3.2",
                    "3.3",
                    "3.4",
                    "3.5",
                    "3.6",
                    "3.7",
                    "3.8",
                    "3.9",
                    "4.0",
                    "4.1",
                    "4.2",
                    "4.3",
                    "4.4",
                    "4.5",
                    "4.6",
                    "4.7",
                    "4.8",
                    "4.9",
                    "5.0",
                    "5.1",
                    "5.2",
                    "5.3",
                    "5.4",
                    "5.5",
                    "5.6",
                    "5.7",
                    "5.8",
                    "5.9",
                    "6.0",
                    "6.1",
                    "6.2",
                    "6.3",
                    "6.4",
                    "6.5",
                    "6.6",
                    "6.7",
                    "6.8",
                    "6.9",
                    "7.0",
                    "7.1",
                    "7.2",
                    "7.3",
                    "7.4",
                    "7.5",
                    "7.6",
                    "7.7",
                    "7.8",
                    "7.9",
                    "8.0",
                    "8.1",
                    "8.2",
                    "8.3",
                    "8.4",
                    "8.5",
                    "8.6",
                    "8.7",
                    "8.8",
                    "8.9",
                    "9.0",
                    "9.1",
                    "9.2",
                    "9.3",
                    "9.4",
                    "9.5",
                    "9.6",
                    "9.7",
                    "9.8",
                    "9.9",
                    "10.0"
                }));
                cbTimeout3.setName("cbTimeout3");

                //---- cbRetransmission ----
                cbRetransmission.setModel(new DefaultComboBoxModel<>(new String[] {
                    "5",
                    "4",
                    "3",
                    "2",
                    "1",
                    "0"
                }));
                cbRetransmission.setName("cbRetransmission");

                //---- jLabel2 ----
                jLabel2.setText(bundle.getString("jLabel2.text"));
                jLabel2.setName("jLabel2");

                GroupLayout pConfigurationLayout = new GroupLayout(pConfiguration);
                pConfiguration.setLayout(pConfigurationLayout);
                pConfigurationLayout.setHorizontalGroup(
                    pConfigurationLayout.createParallelGroup()
                        .addGroup(GroupLayout.Alignment.TRAILING, pConfigurationLayout.createSequentialGroup()
                            .addGroup(pConfigurationLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                .addGroup(pConfigurationLayout.createSequentialGroup()
                                    .addGap(29, 29, 29)
                                    .addGroup(pConfigurationLayout.createParallelGroup()
                                        .addGroup(pConfigurationLayout.createSequentialGroup()
                                            .addGroup(pConfigurationLayout.createParallelGroup()
                                                .addComponent(lbSpeed)
                                                .addComponent(lbTransmission))
                                            .addGap(25, 25, 25)
                                            .addGroup(pConfigurationLayout.createParallelGroup()
                                                .addComponent(cbTransmission, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)
                                                .addComponent(cbSpeed, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(pConfigurationLayout.createSequentialGroup()
                                            .addGroup(pConfigurationLayout.createParallelGroup()
                                                .addComponent(lbTimeout2)
                                                .addComponent(lbTimeout3))
                                            .addGap(18, 18, 18)
                                            .addGroup(pConfigurationLayout.createParallelGroup()
                                                .addComponent(cbTimeout2, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)
                                                .addComponent(cbTimeout3, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE))))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(pConfigurationLayout.createParallelGroup()
                                        .addComponent(lbStation)
                                        .addComponent(lbAddress)
                                        .addComponent(jLabel2)
                                        .addComponent(lbPortNumber))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pConfigurationLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(cbAddress, GroupLayout.Alignment.LEADING)
                                        .addComponent(cbStation)
                                        .addComponent(cbPortNumber)
                                        .addComponent(cbRetransmission, GroupLayout.Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)))
                                .addGroup(pConfigurationLayout.createSequentialGroup()
                                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSave, GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnChange, GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE)))
                            .addGap(25, 25, 25))
                );
                pConfigurationLayout.setVerticalGroup(
                    pConfigurationLayout.createParallelGroup()
                        .addGroup(pConfigurationLayout.createSequentialGroup()
                            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pConfigurationLayout.createParallelGroup()
                                .addGroup(pConfigurationLayout.createSequentialGroup()
                                    .addGroup(pConfigurationLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbPortNumber)
                                        .addComponent(cbPortNumber, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pConfigurationLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbStation)
                                        .addComponent(cbStation, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pConfigurationLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbAddress)
                                        .addComponent(cbAddress, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pConfigurationLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(cbRetransmission, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                .addGroup(pConfigurationLayout.createSequentialGroup()
                                    .addGroup(pConfigurationLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbSpeed)
                                        .addComponent(cbSpeed, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                    .addGap(7, 7, 7)
                                    .addGroup(pConfigurationLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbTransmission)
                                        .addComponent(cbTransmission, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pConfigurationLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbTimeout2)
                                        .addComponent(cbTimeout2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pConfigurationLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbTimeout3)
                                        .addComponent(cbTimeout3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(pConfigurationLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(btnChange)
                                .addComponent(btnSave))
                            .addGap(80, 80, 80))
                );
            }

            GroupLayout mainPanelLayout = new GroupLayout(mainPanel);
            mainPanel.setLayout(mainPanelLayout);
            mainPanelLayout.setHorizontalGroup(
                mainPanelLayout.createParallelGroup()
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(scrWindowMessage, GroupLayout.PREFERRED_SIZE, 407, GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addGroup(mainPanelLayout.createParallelGroup()
                            .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(pConfiguration, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(2, Short.MAX_VALUE))
            );
            mainPanelLayout.setVerticalGroup(
                mainPanelLayout.createParallelGroup()
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(mainPanelLayout.createParallelGroup()
                            .addComponent(scrWindowMessage, GroupLayout.PREFERRED_SIZE, 371, GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, 146, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(pConfiguration, GroupLayout.PREFERRED_SIZE, 211, GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(24, Short.MAX_VALUE))
            );
        }

        //======== menuBar ========
        {
            menuBar.setName("menuBar");

            //======== fileMenu ========
            {
                fileMenu.setText(bundle.getString("fileMenu.text"));
                fileMenu.setName("fileMenu");

                //---- exitMenuItem ----
                exitMenuItem.setText(bundle.getString("exitMenuItem.text"));
                exitMenuItem.setName("exitMenuItem");
                fileMenu.add(exitMenuItem);
            }
            menuBar.add(fileMenu);

            //======== helpMenu ========
            {
                helpMenu.setText(bundle.getString("helpMenu.text"));
                helpMenu.setName("helpMenu");

                //---- aboutMenuItem ----
                aboutMenuItem.setText(bundle.getString("aboutMenuItem.text"));
                aboutMenuItem.setName("aboutMenuItem");
                helpMenu.add(aboutMenuItem);
            }
            menuBar.add(helpMenu);
        }
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSendMouseClicked

        try
        {
            int address = Integer.parseInt(tfAddress.getText());
            int function = Integer.parseInt(tfFunction.getText());

            //new Thread(modbus.getTransactionThread(address, function, data)).start();
            ModbusFrame request = new ModbusFrame();
            request.setAddress((byte)address);
            request.setFunction((byte)function);
            request.setData(tfMessage.getText().getBytes());
            if (!master.send(request)) {
                tfMessageWindow.setText(IWSKView.tfMessageWindow.getText()
                        + "Transakcja nieudana pomimo powtórzeń." + "\r\n");
            }
            tfAddress.requestFocusInWindow();

            scrWindowMessage.getVerticalScrollBar().setValue(scrWindowMessage.getVerticalScrollBar().getMaximum());
        }
        catch (Exception e)
        {

        }
    }//GEN-LAST:event_btnSendMouseClicked



    private void cbStationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbStationItemStateChanged
        if (cbStation.getSelectedIndex() == 0)
        {
            cbRetransmission.setEnabled(true);
            cbAddress.setEnabled(false);
            cbAddress.removeAllItems();
            cbAddress.addItem("0");
        }
        else if (cbStation.getSelectedIndex() == 1)
        {
            cbRetransmission.setEnabled(false);
            cbAddress.setEnabled(true);
            cbAddress.removeAllItems();
            for (int i=1; i<248; i++)
                cbAddress.addItem(String.valueOf(i));
        }
    }//GEN-LAST:event_cbStationItemStateChanged

    private void btnSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseClicked
        String s = "Konfiguracja portu...\n";

        // <editor-fold defaultstate="collapsed" desc="storing boundrate from comboBox in variable">
        int speed = Integer.parseInt((String)cbSpeed.getItemAt(cbSpeed.getSelectedIndex()));
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing port name from comboBox in variable">
        String portNumber = (String)cbPortNumber.getItemAt(cbPortNumber.getSelectedIndex());
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing sign timeout from comboBox in variable">
        int stimeout = (int)(Float.parseFloat((String)cbTimeout2.getItemAt(cbTimeout2.getSelectedIndex())) * 1000);
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing cycle timeout from comboBox in variable">
        int ctimeout = (int)(Float.parseFloat((String)cbTimeout3.getItemAt(cbTimeout3.getSelectedIndex())) * 1000);
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing data, stop bits and parity from comboBox in variable">
        int dataBits = SerialPort.DATABITS_7;
        int stopBits = SerialPort.STOPBITS_1;
        int parity = SerialPort.PARITY_EVEN;
        String sParity = "EVEN";
        switch ((cbTransmission.getSelectedIndex()))
        {
            case 0:
                stopBits = SerialPort.STOPBITS_1;
                parity = SerialPort.PARITY_EVEN;
                sParity = "EVEN";
                break;
            case 1:
                stopBits = SerialPort.STOPBITS_1;
                parity = SerialPort.PARITY_ODD;
                sParity = "ODD";
                break;
            case 2:
                stopBits = SerialPort.STOPBITS_2;
                parity = SerialPort.PARITY_NONE;
                sParity = "NONE";
                break;
        }
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing address from comboBox in variable">
        int address = Integer.parseInt((String)cbAddress.getItemAt(cbAddress.getSelectedIndex()));
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="storing info about Master or Slave from comboBox in variable">
        boolean isMaster;
        if (address == 0)
            isMaster = true;
        else
            isMaster = false;
        // </editor-fold>

        int timesToResend = Integer.parseInt((String)cbRetransmission.getItemAt(cbRetransmission.getSelectedIndex()));

        RS232 rs = new RS232();
        boolean result = rs.openPort(portNumber, null, speed, dataBits, stopBits, parity, 0);

        if (isMaster) {
            master = new Master(timesToResend, ctimeout, stimeout);
            MasterModbusExecutor masterExecutor = new MasterModbusExecutor();
            master.setMasterExecutor(masterExecutor);
            master.setRs(rs);
        } else {
            slave = new Slave(stimeout);
            SlaveModbusExecutor slaveExecutor = new SlaveModbusExecutor((byte)address);
            slave.setSlaveExecutor(slaveExecutor);
            slave.setRs(rs);
            slaveThread = new Thread(slave);
            slaveThread.start();
        }

        if (result)
        {
            btnSave.setEnabled(false);
            btnChange.setEnabled(true);

            cbPortNumber.setEnabled(false);
            cbSpeed.setEnabled(false);
            cbTransmission.setEnabled(false);
            cbTimeout2.setEnabled(false);
            cbTimeout3.setEnabled(false);
            cbRetransmission.setEnabled(false);
            cbStation.setEnabled(false);
            cbAddress.setEnabled(false);

            tfMessage.setText("");
            tfMessage.setEnabled(true);
            tfMessage.setBackground(new Color(255, 255, 255));

            tfGetFrame.setText("");
            tfSendFrame.setText("");

            if (isMaster) {
                tfAddress.setText("");
                tfFunction.setText("");

                tfAddress.setEnabled(true);
                tfFunction.setEnabled(true);

                tfAddress.setBackground(new Color(255, 255, 255));
                tfFunction.setBackground(new Color(255, 255, 255));

                btnSend.setEnabled(true);
            }


            s+= "Konfiguracja przebiegła pomyślnie.\n";
            s+= "[" + cbPortNumber.getSelectedItem().toString() + ", ";
            s+= cbSpeed.getSelectedItem().toString() + "bps, ";
            s+= stopBits + "b stopu, ";
            s+= dataBits + "b danych, ";
            s+= sParity + ", ";
            s+= "CRLF" + "] \r\n";

        }
        else
        {
            s+= "Konfiguracja zakończona błędem.\n";
            s+= "Wybrany port jest w danej chwili używany\r\n";
        }

        tfMessageWindow.setText(s);
        tfAddress.requestFocusInWindow();
        pConfiguration.revalidate();
        mainPanel.revalidate();
        pConfiguration.repaint();
        mainPanel.repaint();
    }//GEN-LAST:event_btnSaveMouseClicked

    private void btnChangeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnChangeMouseClicked

        btnSave.setEnabled(true);
        btnChange.setEnabled(false);
        btnSend.setEnabled(false);

        cbPortNumber.setEnabled(true);
        cbSpeed.setEnabled(true);
        cbTransmission.setEnabled(true);
        cbTimeout2.setEnabled(true);
        cbStation.setEnabled(true);
        cbRetransmission.setEnabled(true);
        if (cbStation.getSelectedIndex() == 1)
        {
            cbRetransmission.setEnabled(false);
            cbAddress.setEnabled(true);
        }
        cbTimeout3.setEnabled(true);

        tfAddress.setText("Adres");
        tfFunction.setText("Kod");
        tfMessage.setText("Dane");

        tfGetFrame.setText("");
        tfSendFrame.setText("");

        tfAddress.setEnabled(false);
        tfFunction.setEnabled(false);
        tfMessage.setEnabled(false);

        tfAddress.setBackground(new Color(240, 240, 240));
        tfFunction.setBackground(new Color(240, 240, 240));
        tfMessage.setBackground(new Color(240, 240, 240));

        if (master != null) {
            master.getRs().closePort();
            master = null;
        }
        if (slave != null) {
            slaveThread.stop();
            slave.getRs().closePort();
            slave = null;
        }
    }//GEN-LAST:event_btnChangeMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - i0rzs5+8dp9m7tskahhc
    public static JPanel mainPanel;
    public static JPanel jPanel1;
    public static JButton btnSend;
    public static JTextField tfFunction;
    public static JTextField tfAddress;
    public static JTextField tfMessage;
    public static JSeparator jSeparator3;
    public static JTextField tfSendFrame;
    public static JLabel jLabel1;
    public static JTextField tfGetFrame;
    public static JLabel jLabel3;
    public static JScrollPane scrWindowMessage;
    public static JTextArea tfMessageWindow;
    public static JPanel pConfiguration;
    private JLabel lbSpeed;
    private JLabel lbTimeout2;
    private JLabel lbTransmission;
    private JComboBox<String> cbSpeed;
    private JComboBox<String> cbTransmission;
    private JComboBox<String> cbTimeout2;
    private JComboBox cbAddress;
    private JLabel lbAddress;
    private JComboBox<String> cbStation;
    private JLabel lbStation;
    private JComboBox<String> cbPortNumber;
    private JLabel lbPortNumber;
    private JButton btnSave;
    private JButton btnChange;
    private JLabel lbTimeout3;
    private JComboBox<String> cbTimeout3;
    private JComboBox<String> cbRetransmission;
    private JLabel jLabel2;
    public static JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables


    private JDialog aboutBox;
}
